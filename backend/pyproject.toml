[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "banking-app"
version = "1.0.0"
description = "Production-ready banking and investment platform"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "cryptography>=41.0.0",
    "email-validator>=2.0.0",
    "python-jose>=3.3.0",
    "bcrypt>=4.1.0",
    "pytz>=2023.3",
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
]

[tool.setuptools]
packages = ["app"]

[tool.ruff]
# Production-ready Ruff configuration
target-version = "py312"
line-length = 120

# Exclude paths
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
    "tests",
]

[tool.ruff.lint]
# Enable these rule categories
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "T20",  # flake8-print (detect print statements)
    "PIE",  # flake8-pie
    "RET",  # flake8-return
    "ERA",  # flake8-eradicate (commented-out code)
    "PL",   # Pylint
]

ignore = [
    "E501",  # Line too long (handled by formatter)
    "E741",  # Ambiguous variable name (i, l, O, etc.)
    "PLR0913",  # Too many arguments
    "B008",  # Function calls in argument defaults (FastAPI Depends pattern)
    "B904",  # Raise from within except (would require significant refactoring)
    "B015",  # Useless comparison
    "B024",  # Abstract base class without abstract methods
    "PLR2004",  # Magic value used in comparison
    "PLC0206",  # Dict unpacking instead of dict()
    "PLC0415",  # Import outside toplevel
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "PLR0911",  # Too many return statements
    "PLW0603",  # Global statement usage
    "PLW1641",  # Object does not implement __hash__
    "ERA001",  # Commented-out code
    "F811",  # Redefinition of unused (needed for dynamic model creation)
    "RUF012",  # Mutable class attributes
    "RUF034",  # Unnecessary key check
    "SIM102",  # Nested if statements (often more readable as-is)
    "SIM105",  # Use contextlib.suppress
    "SIM108",  # Ternary operators (often less readable)
]

[tool.ruff.lint.per-file-ignores]
# Allow print statements in specific utility files
"app/repositories/mock_data_generator.py" = ["T201"]
"app/utils/communications.py" = ["T201"]
# Allow star imports in package init files
"app/models/__init__.py" = ["F403", "F405"]
"app/models/entities/__init__.py" = ["F403", "F405"]
"app/models/dto.py" = ["F403"]
"app/models/dto/__init__.py" = ["F403"]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = false

# Ignore specific modules that require extensive refactoring
[[tool.mypy.overrides]]
module = [
    "app.models.*",
    "app.routes.*",
    "app.repositories.*",
    "app.utils.*",
    "app.storage.*",
    "app.security.*",
    "app.services.*",
    "app.middleware.*",
    "app.core.*",
    "app.main_test_mock",
]
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "timeout: marks tests as having a timeout limit"
]